// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get newStatus(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class EternalFarmingCreated extends ethereum.Event {
  get params(): EternalFarmingCreated__Params {
    return new EternalFarmingCreated__Params(this);
  }
}

export class EternalFarmingCreated__Params {
  _event: EternalFarmingCreated;

  constructor(event: EternalFarmingCreated) {
    this._event = event;
  }

  get rewardToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bonusRewardToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get virtualPool(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get bonusReward(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get minimalAllowedPositionWidth(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class FarmEnded extends ethereum.Event {
  get params(): FarmEnded__Params {
    return new FarmEnded__Params(this);
  }
}

export class FarmEnded__Params {
  _event: FarmEnded;

  constructor(event: FarmEnded) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get incentiveId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get rewardAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bonusRewardToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get bonusReward(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class FarmEntered extends ethereum.Event {
  get params(): FarmEntered__Params {
    return new FarmEntered__Params(this);
  }
}

export class FarmEntered__Params {
  _event: FarmEntered;

  constructor(event: FarmEntered) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get incentiveId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get liquidity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FarmingCenter extends ethereum.Event {
  get params(): FarmingCenter__Params {
    return new FarmingCenter__Params(this);
  }
}

export class FarmingCenter__Params {
  _event: FarmingCenter;

  constructor(event: FarmingCenter) {
    this._event = event;
  }

  get farmingCenter(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IncentiveDeactivated extends ethereum.Event {
  get params(): IncentiveDeactivated__Params {
    return new IncentiveDeactivated__Params(this);
  }
}

export class IncentiveDeactivated__Params {
  _event: IncentiveDeactivated;

  constructor(event: IncentiveDeactivated) {
    this._event = event;
  }

  get incentiveId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RewardAmountsDecreased extends ethereum.Event {
  get params(): RewardAmountsDecreased__Params {
    return new RewardAmountsDecreased__Params(this);
  }
}

export class RewardAmountsDecreased__Params {
  _event: RewardAmountsDecreased;

  constructor(event: RewardAmountsDecreased) {
    this._event = event;
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bonusRewardAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get incentiveId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RewardClaimed extends ethereum.Event {
  get params(): RewardClaimed__Params {
    return new RewardClaimed__Params(this);
  }
}

export class RewardClaimed__Params {
  _event: RewardClaimed;

  constructor(event: RewardClaimed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class RewardsAdded extends ethereum.Event {
  get params(): RewardsAdded__Params {
    return new RewardsAdded__Params(this);
  }
}

export class RewardsAdded__Params {
  _event: RewardsAdded;

  constructor(event: RewardsAdded) {
    this._event = event;
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bonusRewardAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get incentiveId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RewardsCollected extends ethereum.Event {
  get params(): RewardsCollected__Params {
    return new RewardsCollected__Params(this);
  }
}

export class RewardsCollected__Params {
  _event: RewardsCollected;

  constructor(event: RewardsCollected) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get incentiveId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bonusRewardAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RewardsRatesChanged extends ethereum.Event {
  get params(): RewardsRatesChanged__Params {
    return new RewardsRatesChanged__Params(this);
  }
}

export class RewardsRatesChanged__Params {
  _event: RewardsRatesChanged;

  constructor(event: RewardsRatesChanged) {
    this._event = event;
  }

  get rewardRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bonusRewardRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get incentiveId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class EternalFarming__collectRewardsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReward(): BigInt {
    return this.value0;
  }

  getBonusReward(): BigInt {
    return this.value1;
  }
}

export class EternalFarming__collectRewardsInputKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class EternalFarming__createEternalFarmingInputKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class EternalFarming__createEternalFarmingInputParamsStruct extends ethereum.Tuple {
  get reward(): BigInt {
    return this[0].toBigInt();
  }

  get bonusReward(): BigInt {
    return this[1].toBigInt();
  }

  get rewardRate(): BigInt {
    return this[2].toBigInt();
  }

  get bonusRewardRate(): BigInt {
    return this[3].toBigInt();
  }

  get minimalPositionWidth(): i32 {
    return this[4].toI32();
  }
}

export class EternalFarming__farmsResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getLiquidity(): BigInt {
    return this.value0;
  }

  getTickLower(): i32 {
    return this.value1;
  }

  getTickUpper(): i32 {
    return this.value2;
  }

  getInnerRewardGrowth0(): BigInt {
    return this.value3;
  }

  getInnerRewardGrowth1(): BigInt {
    return this.value4;
  }
}

export class EternalFarming__getRewardInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReward(): BigInt {
    return this.value0;
  }

  getBonusReward(): BigInt {
    return this.value1;
  }
}

export class EternalFarming__getRewardInfoInputKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class EternalFarming__incentivesResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: i32;
  value4: boolean;
  value5: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: i32,
    value4: boolean,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }

  getTotalReward(): BigInt {
    return this.value0;
  }

  getBonusReward(): BigInt {
    return this.value1;
  }

  getVirtualPoolAddress(): Address {
    return this.value2;
  }

  getMinimalPositionWidth(): i32 {
    return this.value3;
  }

  getDeactivated(): boolean {
    return this.value4;
  }

  getPluginAddress(): Address {
    return this.value5;
  }
}

export class EternalFarming extends ethereum.SmartContract {
  static bind(address: Address): EternalFarming {
    return new EternalFarming("EternalFarming", address);
  }

  FARMINGS_ADMINISTRATOR_ROLE(): Bytes {
    let result = super.call(
      "FARMINGS_ADMINISTRATOR_ROLE",
      "FARMINGS_ADMINISTRATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_FARMINGS_ADMINISTRATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FARMINGS_ADMINISTRATOR_ROLE",
      "FARMINGS_ADMINISTRATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  INCENTIVE_MAKER_ROLE(): Bytes {
    let result = super.call(
      "INCENTIVE_MAKER_ROLE",
      "INCENTIVE_MAKER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_INCENTIVE_MAKER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "INCENTIVE_MAKER_ROLE",
      "INCENTIVE_MAKER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claimReward(
    rewardToken: Address,
    to: Address,
    amountRequested: BigInt
  ): BigInt {
    let result = super.call(
      "claimReward",
      "claimReward(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountRequested)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimReward(
    rewardToken: Address,
    to: Address,
    amountRequested: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimReward",
      "claimReward(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountRequested)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewardFrom(
    rewardToken: Address,
    from: Address,
    to: Address,
    amountRequested: BigInt
  ): BigInt {
    let result = super.call(
      "claimRewardFrom",
      "claimRewardFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountRequested)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewardFrom(
    rewardToken: Address,
    from: Address,
    to: Address,
    amountRequested: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewardFrom",
      "claimRewardFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountRequested)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectRewards(
    key: EternalFarming__collectRewardsInputKeyStruct,
    tokenId: BigInt,
    _owner: Address
  ): EternalFarming__collectRewardsResult {
    let result = super.call(
      "collectRewards",
      "collectRewards((address,address,address,uint256),uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return new EternalFarming__collectRewardsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collectRewards(
    key: EternalFarming__collectRewardsInputKeyStruct,
    tokenId: BigInt,
    _owner: Address
  ): ethereum.CallResult<EternalFarming__collectRewardsResult> {
    let result = super.tryCall(
      "collectRewards",
      "collectRewards((address,address,address,uint256),uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EternalFarming__collectRewardsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  createEternalFarming(
    key: EternalFarming__createEternalFarmingInputKeyStruct,
    params: EternalFarming__createEternalFarmingInputParamsStruct
  ): Address {
    let result = super.call(
      "createEternalFarming",
      "createEternalFarming((address,address,address,uint256),(uint128,uint128,uint128,uint128,uint24)):(address)",
      [ethereum.Value.fromTuple(key), ethereum.Value.fromTuple(params)]
    );

    return result[0].toAddress();
  }

  try_createEternalFarming(
    key: EternalFarming__createEternalFarmingInputKeyStruct,
    params: EternalFarming__createEternalFarmingInputParamsStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createEternalFarming",
      "createEternalFarming((address,address,address,uint256),(uint128,uint128,uint128,uint128,uint24)):(address)",
      [ethereum.Value.fromTuple(key), ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farmingCenter(): Address {
    let result = super.call("farmingCenter", "farmingCenter():(address)", []);

    return result[0].toAddress();
  }

  try_farmingCenter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "farmingCenter",
      "farmingCenter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farms(tokenId: BigInt, incentiveId: Bytes): EternalFarming__farmsResult {
    let result = super.call(
      "farms",
      "farms(uint256,bytes32):(uint128,int24,int24,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromFixedBytes(incentiveId)
      ]
    );

    return new EternalFarming__farmsResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_farms(
    tokenId: BigInt,
    incentiveId: Bytes
  ): ethereum.CallResult<EternalFarming__farmsResult> {
    let result = super.tryCall(
      "farms",
      "farms(uint256,bytes32):(uint128,int24,int24,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromFixedBytes(incentiveId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EternalFarming__farmsResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getRewardInfo(
    key: EternalFarming__getRewardInfoInputKeyStruct,
    tokenId: BigInt
  ): EternalFarming__getRewardInfoResult {
    let result = super.call(
      "getRewardInfo",
      "getRewardInfo((address,address,address,uint256),uint256):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new EternalFarming__getRewardInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRewardInfo(
    key: EternalFarming__getRewardInfoInputKeyStruct,
    tokenId: BigInt
  ): ethereum.CallResult<EternalFarming__getRewardInfoResult> {
    let result = super.tryCall(
      "getRewardInfo",
      "getRewardInfo((address,address,address,uint256),uint256):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EternalFarming__getRewardInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  incentives(incentiveId: Bytes): EternalFarming__incentivesResult {
    let result = super.call(
      "incentives",
      "incentives(bytes32):(uint128,uint128,address,uint24,bool,address)",
      [ethereum.Value.fromFixedBytes(incentiveId)]
    );

    return new EternalFarming__incentivesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toBoolean(),
      result[5].toAddress()
    );
  }

  try_incentives(
    incentiveId: Bytes
  ): ethereum.CallResult<EternalFarming__incentivesResult> {
    let result = super.tryCall(
      "incentives",
      "incentives(bytes32):(uint128,uint128,address,uint24,bool,address)",
      [ethereum.Value.fromFixedBytes(incentiveId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EternalFarming__incentivesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toBoolean(),
        value[5].toAddress()
      )
    );
  }

  isEmergencyWithdrawActivated(): boolean {
    let result = super.call(
      "isEmergencyWithdrawActivated",
      "isEmergencyWithdrawActivated():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isEmergencyWithdrawActivated(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEmergencyWithdrawActivated",
      "isEmergencyWithdrawActivated():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isIncentiveActive(incentiveId: Bytes): boolean {
    let result = super.call(
      "isIncentiveActive",
      "isIncentiveActive(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(incentiveId)]
    );

    return result[0].toBoolean();
  }

  try_isIncentiveActive(incentiveId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isIncentiveActive",
      "isIncentiveActive(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(incentiveId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nonfungiblePositionManager(): Address {
    let result = super.call(
      "nonfungiblePositionManager",
      "nonfungiblePositionManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nonfungiblePositionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nonfungiblePositionManager",
      "nonfungiblePositionManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numOfIncentives(): BigInt {
    let result = super.call(
      "numOfIncentives",
      "numOfIncentives():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numOfIncentives(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numOfIncentives",
      "numOfIncentives():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(owner: Address, rewardToken: Address): BigInt {
    let result = super.call("rewards", "rewards(address,address):(uint256)", [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(rewardToken)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(
    owner: Address,
    rewardToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewards",
      "rewards(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(rewardToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _deployer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nonfungiblePositionManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRewardsCall extends ethereum.Call {
  get inputs(): AddRewardsCall__Inputs {
    return new AddRewardsCall__Inputs(this);
  }

  get outputs(): AddRewardsCall__Outputs {
    return new AddRewardsCall__Outputs(this);
  }
}

export class AddRewardsCall__Inputs {
  _call: AddRewardsCall;

  constructor(call: AddRewardsCall) {
    this._call = call;
  }

  get key(): AddRewardsCallKeyStruct {
    return changetype<AddRewardsCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get rewardAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bonusRewardAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddRewardsCall__Outputs {
  _call: AddRewardsCall;

  constructor(call: AddRewardsCall) {
    this._call = call;
  }
}

export class AddRewardsCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountRequested(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimRewardFromCall extends ethereum.Call {
  get inputs(): ClaimRewardFromCall__Inputs {
    return new ClaimRewardFromCall__Inputs(this);
  }

  get outputs(): ClaimRewardFromCall__Outputs {
    return new ClaimRewardFromCall__Outputs(this);
  }
}

export class ClaimRewardFromCall__Inputs {
  _call: ClaimRewardFromCall;

  constructor(call: ClaimRewardFromCall) {
    this._call = call;
  }

  get rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amountRequested(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ClaimRewardFromCall__Outputs {
  _call: ClaimRewardFromCall;

  constructor(call: ClaimRewardFromCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectRewardsCall extends ethereum.Call {
  get inputs(): CollectRewardsCall__Inputs {
    return new CollectRewardsCall__Inputs(this);
  }

  get outputs(): CollectRewardsCall__Outputs {
    return new CollectRewardsCall__Outputs(this);
  }
}

export class CollectRewardsCall__Inputs {
  _call: CollectRewardsCall;

  constructor(call: CollectRewardsCall) {
    this._call = call;
  }

  get key(): CollectRewardsCallKeyStruct {
    return changetype<CollectRewardsCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CollectRewardsCall__Outputs {
  _call: CollectRewardsCall;

  constructor(call: CollectRewardsCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get bonusReward(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectRewardsCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class CreateEternalFarmingCall extends ethereum.Call {
  get inputs(): CreateEternalFarmingCall__Inputs {
    return new CreateEternalFarmingCall__Inputs(this);
  }

  get outputs(): CreateEternalFarmingCall__Outputs {
    return new CreateEternalFarmingCall__Outputs(this);
  }
}

export class CreateEternalFarmingCall__Inputs {
  _call: CreateEternalFarmingCall;

  constructor(call: CreateEternalFarmingCall) {
    this._call = call;
  }

  get key(): CreateEternalFarmingCallKeyStruct {
    return changetype<CreateEternalFarmingCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get params(): CreateEternalFarmingCallParamsStruct {
    return changetype<CreateEternalFarmingCallParamsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class CreateEternalFarmingCall__Outputs {
  _call: CreateEternalFarmingCall;

  constructor(call: CreateEternalFarmingCall) {
    this._call = call;
  }

  get virtualPool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateEternalFarmingCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class CreateEternalFarmingCallParamsStruct extends ethereum.Tuple {
  get reward(): BigInt {
    return this[0].toBigInt();
  }

  get bonusReward(): BigInt {
    return this[1].toBigInt();
  }

  get rewardRate(): BigInt {
    return this[2].toBigInt();
  }

  get bonusRewardRate(): BigInt {
    return this[3].toBigInt();
  }

  get minimalPositionWidth(): i32 {
    return this[4].toI32();
  }
}

export class DeactivateIncentiveCall extends ethereum.Call {
  get inputs(): DeactivateIncentiveCall__Inputs {
    return new DeactivateIncentiveCall__Inputs(this);
  }

  get outputs(): DeactivateIncentiveCall__Outputs {
    return new DeactivateIncentiveCall__Outputs(this);
  }
}

export class DeactivateIncentiveCall__Inputs {
  _call: DeactivateIncentiveCall;

  constructor(call: DeactivateIncentiveCall) {
    this._call = call;
  }

  get key(): DeactivateIncentiveCallKeyStruct {
    return changetype<DeactivateIncentiveCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DeactivateIncentiveCall__Outputs {
  _call: DeactivateIncentiveCall;

  constructor(call: DeactivateIncentiveCall) {
    this._call = call;
  }
}

export class DeactivateIncentiveCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class DecreaseRewardsAmountCall extends ethereum.Call {
  get inputs(): DecreaseRewardsAmountCall__Inputs {
    return new DecreaseRewardsAmountCall__Inputs(this);
  }

  get outputs(): DecreaseRewardsAmountCall__Outputs {
    return new DecreaseRewardsAmountCall__Outputs(this);
  }
}

export class DecreaseRewardsAmountCall__Inputs {
  _call: DecreaseRewardsAmountCall;

  constructor(call: DecreaseRewardsAmountCall) {
    this._call = call;
  }

  get key(): DecreaseRewardsAmountCallKeyStruct {
    return changetype<DecreaseRewardsAmountCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get rewardAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bonusRewardAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DecreaseRewardsAmountCall__Outputs {
  _call: DecreaseRewardsAmountCall;

  constructor(call: DecreaseRewardsAmountCall) {
    this._call = call;
  }
}

export class DecreaseRewardsAmountCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class EnterFarmingCall extends ethereum.Call {
  get inputs(): EnterFarmingCall__Inputs {
    return new EnterFarmingCall__Inputs(this);
  }

  get outputs(): EnterFarmingCall__Outputs {
    return new EnterFarmingCall__Outputs(this);
  }
}

export class EnterFarmingCall__Inputs {
  _call: EnterFarmingCall;

  constructor(call: EnterFarmingCall) {
    this._call = call;
  }

  get key(): EnterFarmingCallKeyStruct {
    return changetype<EnterFarmingCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EnterFarmingCall__Outputs {
  _call: EnterFarmingCall;

  constructor(call: EnterFarmingCall) {
    this._call = call;
  }
}

export class EnterFarmingCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExitFarmingCall extends ethereum.Call {
  get inputs(): ExitFarmingCall__Inputs {
    return new ExitFarmingCall__Inputs(this);
  }

  get outputs(): ExitFarmingCall__Outputs {
    return new ExitFarmingCall__Outputs(this);
  }
}

export class ExitFarmingCall__Inputs {
  _call: ExitFarmingCall;

  constructor(call: ExitFarmingCall) {
    this._call = call;
  }

  get key(): ExitFarmingCallKeyStruct {
    return changetype<ExitFarmingCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ExitFarmingCall__Outputs {
  _call: ExitFarmingCall;

  constructor(call: ExitFarmingCall) {
    this._call = call;
  }
}

export class ExitFarmingCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class SetEmergencyWithdrawStatusCall extends ethereum.Call {
  get inputs(): SetEmergencyWithdrawStatusCall__Inputs {
    return new SetEmergencyWithdrawStatusCall__Inputs(this);
  }

  get outputs(): SetEmergencyWithdrawStatusCall__Outputs {
    return new SetEmergencyWithdrawStatusCall__Outputs(this);
  }
}

export class SetEmergencyWithdrawStatusCall__Inputs {
  _call: SetEmergencyWithdrawStatusCall;

  constructor(call: SetEmergencyWithdrawStatusCall) {
    this._call = call;
  }

  get newStatus(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEmergencyWithdrawStatusCall__Outputs {
  _call: SetEmergencyWithdrawStatusCall;

  constructor(call: SetEmergencyWithdrawStatusCall) {
    this._call = call;
  }
}

export class SetFarmingCenterAddressCall extends ethereum.Call {
  get inputs(): SetFarmingCenterAddressCall__Inputs {
    return new SetFarmingCenterAddressCall__Inputs(this);
  }

  get outputs(): SetFarmingCenterAddressCall__Outputs {
    return new SetFarmingCenterAddressCall__Outputs(this);
  }
}

export class SetFarmingCenterAddressCall__Inputs {
  _call: SetFarmingCenterAddressCall;

  constructor(call: SetFarmingCenterAddressCall) {
    this._call = call;
  }

  get _farmingCenter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFarmingCenterAddressCall__Outputs {
  _call: SetFarmingCenterAddressCall;

  constructor(call: SetFarmingCenterAddressCall) {
    this._call = call;
  }
}

export class SetRatesCall extends ethereum.Call {
  get inputs(): SetRatesCall__Inputs {
    return new SetRatesCall__Inputs(this);
  }

  get outputs(): SetRatesCall__Outputs {
    return new SetRatesCall__Outputs(this);
  }
}

export class SetRatesCall__Inputs {
  _call: SetRatesCall;

  constructor(call: SetRatesCall) {
    this._call = call;
  }

  get key(): SetRatesCallKeyStruct {
    return changetype<SetRatesCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get rewardRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bonusRewardRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRatesCall__Outputs {
  _call: SetRatesCall;

  constructor(call: SetRatesCall) {
    this._call = call;
  }
}

export class SetRatesCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}
